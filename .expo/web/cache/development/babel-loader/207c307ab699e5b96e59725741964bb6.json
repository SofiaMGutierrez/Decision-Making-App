{"ast":null,"code":"export function PrefListCost(n) {\n  this.size = n;\n  this.items = [{\n    item: 0,\n    equals: []\n  }];\n  this.current = {\n    item: 1,\n    try: 0,\n    min: 0,\n    max: 1\n  };\n\n  this.addAnswer = function (pref) {\n    if (pref == 0) {\n      this.items[this.current.try].equals.push(this.current.item);\n      this.current = {\n        item: ++this.current.item,\n        try: 0,\n        min: 0,\n        max: this.items.length\n      };\n    } else {\n      if (pref == -1) this.current.max = this.current.try;else this.current.min = this.current.try + 1;\n\n      if (this.current.min == this.current.max) {\n        this.items.splice(this.current.min, 0, {\n          item: this.current.item,\n          equals: []\n        });\n        this.current = {\n          item: ++this.current.item,\n          try: 0,\n          min: 0,\n          max: this.items.length\n        };\n      }\n    }\n  };\n\n  this.getQuestion = function () {\n    if (this.current.item >= this.size) return null;\n    this.current.try = Math.floor((this.current.min + this.current.max) / 2);\n    return {\n      a: this.current.item,\n      b: this.items[this.current.try].item\n    };\n  };\n\n  this.getOrder = function () {\n    var index = [];\n\n    for (var i in this.items) {\n      var equal = [this.items[i].item];\n\n      for (var j in this.items[i].equals) {\n        equal.push(this.items[i].equals[j]);\n      }\n\n      index.push(equal);\n    }\n\n    return index;\n  };\n}","map":{"version":3,"sources":["/Users/sofiagutierrez/Documents/Git Uploads/Decision-Making-App/cost_algo.js"],"names":["PrefListCost","n","size","items","item","equals","current","try","min","max","addAnswer","pref","push","length","splice","getQuestion","Math","floor","a","b","getOrder","index","i","equal","j"],"mappings":"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","sourcesContent":["export function PrefListCost(n) {\n    this.size = n;\n    this.items = [{item: 0, equals: []}]; // array where the categories will be stored\n    this.current = {item: 1, try: 0, min: 0, max: 1};\n    // BINARY INSERTION SORT\n    this.addAnswer = function(pref) {\n        if (pref == 0) { // no preference is selected\n            this.items[this.current.try].equals.push(this.current.item);\n            this.current = {item: ++this.current.item, try: 0, min: 0, max: this.items.length};\n        } else {\n            if (pref == -1) this.current.max = this.current.try\n            // else pref == 1\n            else this.current.min = this.current.try + 1;\n            if (this.current.min == this.current.max) {\n                this.items.splice(this.current.min, 0, {item: this.current.item, equals: []});\n                this.current = {item: ++this.current.item, try: 0, min: 0, max: this.items.length};\n            }\n        }\n    }\n    // MAKES SURE THERE ARE NO REDUNDANT QUESTIONS\n    this.getQuestion = function() {\n        if (this.current.item >= this.size) return null;\n        this.current.try = Math.floor((this.current.min + this.current.max) / 2);\n        return({a: this.current.item, b: this.items[this.current.try].item});\n    }\n    // RETURNS NEW CORRECTLY ORDERED ARRAY\n    this.getOrder = function() {\n        var index = [];\n        for (var i in this.items) {\n            var equal = [this.items[i].item];\n            for (var j in this.items[i].equals) {\n                equal.push(this.items[i].equals[j]);\n            }\n            index.push(equal);\n        }\n        return(index);\n    }\n}"]},"metadata":{},"sourceType":"module"}